export default BNIDIRECT;
declare class BNIDIRECT {
  constructor(client: any);
  client: any;
  config: any;
  timeStamp: any;
  /**
   * Initiate with options
   * @param  {Object} options - should have these props:
   * accountNo
   */
  InquiryBniPOPSProductAllocation(params?: {
      corporateId:string;
      userId:string;
      debitAccountNo:string;
      salesOrganizationCode:string;
      distributionChannelCode:string;
      productCode:string;
      shipTo:string;
      scheduleAggreementNo:string;
      debitOrCreditNoteNo:string;
      productInformationDetail:string[];
  });
  getPaymentStatus(params?: { 
      corporateId:string;
      userId: string;
      transactionReferenceNo:string;
      remitterReferenceNo:string;
  });
  inhouseTransfer(params?: { 
      corporateId:string;
      userId: string;
      debitedAccountNo: string;
      amountCurrency:string;
      amount: string;
      treasuryReferenceNo: string;
      transactionPurposeCode: string;
      remark1: string;
      remark2: string;
      remark3: string;
      remitterReferenceNo: string;
      finalizePaymentFlag: string;
      beneficiaryReferenceNo: string;
      toAccountNo: string;
      notificationFlag: string;
      beneficiaryEmail: string;
      transactionInstructionDate: string;
      docUniqueId: string;
  });
  transferLLG(params?: { 
    corporateId:string;
    userId: string;
    debitedAccountNo:string;
    amountCurrency: string;
    amount:string;
    treasuryReferenceNo: string;
    chargeTo:string;
    remark1:string;
    remark2: string;
    remark3: string;
    remitterReferenceNo: string;
    finalizePaymentFlag: string;
    beneficiaryReferenceNo: string;
    beneficiaryAccountNo:string;
    beneficiaryAccountName:string;
    beneficiaryAddress1: string;
    beneficiaryAddress2: string;
    beneficiaryAddress3: string;
    beneficiaryResidentshipCountryCode: string;
    beneficiaryCitizenshipCountryCode: string;
    beneficiaryType: string;
    beneficiaryBankCode: string;
    beneficiaryBankName: string;
    beneficiaryBankBranchCode: string;
    beneficiaryBankBranchName:string;
    beneficiaryBankCityName: string;
    notificationFlag: string;
    beneficiaryEmail: string;
    transactionInstructionDate: string;
  });
  transferRTGS(params?: {
    corporateId: string;
    userId: string;
    debitedAccountNo: string;
    amountCurrency: string;
    amount: string;
    treasuryReferenceNo: string;
    chargeTo: string;
    remark1: string;
    remark2: string;
    remark3: string;
    remitterReferenceNo: string;
    finalizePaymentFlag: string;
    beneficiaryReferenceNo: string;
    beneficiaryAccountNo: string;
    beneficiaryAccountName: string;
    beneficiaryAddress1: string;
    beneficiaryAddress2: string;
    beneficiaryAddress3: string;
    beneficiaryResidentshipCountryCode: string;
    beneficiaryCitizenshipCountryCode: string;
    beneficiaryBankCode: string;
    beneficiaryBankName: string;
    beneficiaryBankBranchCode: string;
    beneficiaryBankBranchName: string;
    beneficiaryBankCityName: string;
    notificationFlag: string;
    beneficiaryEmail: string;
    transactionInstructionDate: string;
  });
  transferOnline(params?: { 
    corporateId: string;
    userId: string;
    debitedAccountNo: string;
    amountCurrency:string;
    amount:string;
    treasuryReferenceNo: string;
    chargeTo: string;
    remark1:string;
    remark2: string;
    remark3: string;
    remitterReferenceNo: string;
    finalizePaymentFlag: string;
    beneficiaryReferenceNo: string;
    beneficiaryAccountNo: string;
    beneficiaryBankCode: string;
    beneficiaryBankName: string;
    notificationFlag: string;
    beneficiaryEmail: string;
    transactionInstructionDate: string;
  });
  transferInternational(params?: { 
      corporateId: string;
      userId: string;
      debitedAccountNo: string;
      amountCurrency: string;
      amount: string;
      treasuryReferenceNo: string;
      chargeTo: string;
      remark1:string;
      remark2: string;
      remark3: string;
      remitterReferenceNo: string;
      finalizePaymentFlag: string;
      beneficiaryReferenceNo: string;
      beneficiaryAccountNo: string;
      beneficiaryAccountName: string;
      beneficiaryAddress1: string;
      beneficiaryAddress2: string;
      beneficiaryAddress3: string;
      organizationDirectoryCode: string;
      beneficiaryBankCode: string;
      beneficiaryBankName: string;
      beneficiaryBankBranchName: string;
      beneficiaryBankAddress1: string;
      beneficiaryBankAddress2: string;
      beneficiaryBankAddress3: string;
      beneficiaryBankCountryName: string;
      correspondentBankName: string;
      identicalStatusFlag: string;
      beneficiaryResidentshipCode: string;
      beneficiaryCitizenshipCode: string;
      beneficiaryCategoryCode:string;
      transactorRelationship:string;
      transactionPurposeCode: string;
      transactionDescription: string;
      notificationFlag: string;
      beneficiaryEmail: string;
      transactionInstructionDate: string;
      docUniqueId: string;
  });
  billingPayment(params?: {
    corporateId:string;
    userId:string;
    debitedAccountNo:string;
    institution:string;
    payeeName:string;
    customerInformation1:string;
    customerInformation2:string;
    customerInformation3:string;
    customerInformation4:string;
    customerInformation5:string;
    billPresentmentFlag:string;
    remitterRefNo:string;
    finalizePaymentFlag:string;
    beneficiaryRefNo:string;
    notificationFlag:string;
    beneficiaryEmail:string;
    transactionInstructionDate:string;
    amountCurrency:string;
    amount:string;
  });
  bniPopsCashAndCarry(params?: {
    corporateId: string;
    userId: string;
    debitedAccountNo: string;
    salesOrganizationCode: string;
    distributionChannelCode: string;
    productCode: string;
    shipTo: string;
    debitOrCreditNoteNo: string;
    productInformationDetail: string[];
  });
  bniPopsProductAllocation(params?: {
    corporateId: string;
    userId: string;
    debitedAccountNo: string;
    salesOrganizationCode: string;
    distributionChannelCode: string;
    productCode: string;
    shipTo: string;
    scheduleAggreementNo: string;
    debitOrCreditNoteNo: string;
    productInformationDetail: string[];
  });
  bniPopsResubmitCashAndCarry(params?: {
    corporateId: string;
    userId: string;
    transactionReferenceNo: string;
    SONumber: string;
  });
  bniPopsResubmitProductAllocation(params?: {
    corporateId: string;
    userId: string;
    transactionReferenceNo: string;
    SONumber: string;
  });
  createVirtualAccount(params?: {
    corporateId: string;
    userId: string;
    companyCode: string;
    virtualAccountNo: string;
    virtualAccountName: string;
    virtualAccountTypeCode: string;
    billingAmount: string;
    varAmount1: string;
    varAmount2: string;
    expiryDate: string;
    expiryTime: string;
    mobilePhoneNo: string;
    statusCode: string;
  });
  updateVirtualAccount(params?: {
    corporateId: string;
    userId: string;
    companyCode: string;
    virtualAccountNo: string;
    virtualAccountName: string;
    virtualAccountTypeCode: string;
    billingAmount: string;
    varAmount1: string;
    varAmount2: string;
    expiryDate: string;
    expiryTime: string;
    mobilePhoneNo: string;
    statusCode: string;
  });
  inquiryVirtualAccountTransaction(params?: {
    corporateId: string;
    userId: string;
    virtualAccountNo: string;
    fromDate: string;
    toDate: string;
  });
  bulkGetStatus(params?: {
    corporateId: string;
    userId: string;
    fileRefNo: string;
    apiRefNo: string;
  });
  balanceInquiry(params?: {
    corporateId: string;
    userId: string;
    accountList: Array<string>;
  });
  inquiryForexRate(params?: {
    corporateId: string;
    userId: string;
    currencyList: string[];
  });
  bulkPaymentMixed(params?: {
    corporateId: string;
    userId: string;
    apiRefNo: string;
    instructionDate: string;
    session: string;
    serviceType: string;
    debitAcctNo: string;
    amount: string;
    currency: string;
    chargeTo: string;
    residenceCode: string;
    citizenCode: string;
    category: string;
    transactionType: string;
    accountNmValidation: string;
    remark: string;
    childContent: string;
  });
  payrollMixed(params?: {
    corporateId: string;
    userId: string;
    apiRefNo: string;
    instructionDate: string;
    session: string;
    serviceType: string;
    debitAcctNo: string;
    amount: string;
    currency: string;
    chargeTo: string;
    residenceCode: string;
    citizenCode: string;
    category: string;
    transactionType: string;
    accountNmValidation: string;
    remark: string;
    childContent: string;
  });
  domesticSingleBIFastTransfer(params?: {
    corporateId: string;
    userId: string;
    debitedAccountNo: string;
    amountCurrency: string;
    amount: string;
    exchangeRateCode: string;
    treasuryReferenceNo?: string;
    chargeTo: string;
    remark1: string;
    remark2: string;
    remark3: string;
    remitterReferenceNo: string;
    finalizePaymentFlag: string;
    beneficiaryReferenceNo: string;
    usedProxy: string;
    beneficiaryAccountNo: string;
    proxyId?: string;
    beneficiaryBankCode: string;
    beneficiaryBankName: string;
    notificationFlag: string;
    beneficiaryEmail?: string;
    transactionInstructionDate: string;
    transactionPurposeCode: string;
  });
  inquiryBIFastBeneficiaryName(params?: {
    corporateId: string;
    userId: string;
    usedProxy: string;
    beneficiaryAccountNo: string;
    proxyId: string;
    beneficiaryBankCode: string;
  });
}
